{"pageProps":{"post":{"title":"Dart 언어 심화","description":"Dart 언어에 대한 심화된 내용을 정리해봤습니다.","icon":"","image":"","tags":["Dart","Asynchronous","Isolate","Callback"],"draft":false,"date":"2023-09-15 / 11:09","content":"\n<notice>\n  기초적인 지식이 필요하신 분들은 [**`Dart 언어 기초`**](https://wjlee611.github.io/blog/flutter/003_dart_basic) 포스트를 읽어보시길 권장드립니다.\n</notice>\n\n## async / await\n\n`async`, `await` 키워드는 **비동기 프로그래밍**시 빠지지 않는 키워드입니다.\n여기서 `.then()` 메서드나 Dart 에서 `Future<T>` 도 포함해서 원리와 적절한 사용법까지 알아보고자 합니다.\n\n<tip>\n  `비동기 프로그래밍`\n  특정 코드가 완료되기 전, 다른 코드를 수행함으로서 코드의 실행 순서가 순차적(동기적)으로 실행되지 않는 프로그래밍 방식입니다.\n  보통 처리완료까지 시간이 많이 걸리는 네트워크 통신이나 파일 입출력 등에 많이 사용됩니다.\n</tip>\n\n<notice>\n  비동기 처리는 `단일 스레드(Dart의 경우 단일 Isolate) 환경`에서 이루어집니다.\n  따라서 비동기 처리를 한다고 해도, 비동기 함수가 `컴퓨팅 자원 사용량이 많다`면 해당 스레드(Isolate)는 `일시 정지`되는 현상이 발생할 수 있습니다.\n  <br />\n  이와 관련한 자세한 내용은 아래 [**`Isolate`**](https://wjlee611.github.io/blog/flutter/004_dart_advanced#isolate) 파트에서 다루겠습니다.\n</notice>\n\n### Future\n\n`Future` 객체는 지금 당장은 처리되지 않았지만, 미래에 처리가 완료될 데이터를 알려주는 객체입니다.\n예를 들어봅시다.\n\n```dart:.dart\nFuture<String> futureStr() async {\n  print('do something');\n  return Future.delayed(Duration(seconds: 2), () => 'future string');\n}\n\nvoid main() {\n  print('start');\n  print(futureStr());\n}\n```\n\n위의 futureStr() 함수는 호출 후 2초뒤에 'future string'을 반환하는 함수입니다.\n실행결과는 어떻게 될까요?\n\n> start\n> do something\n> Instance of 'Future\\<String\\>'\n> (2초 후 종료)\n\n답은 `future 객체` 입니다.\n어찌보면 당연합니다. `main` 함수는 비동기 함수도 아닐 뿐더러 futureStr의 리턴값은 `Future<String>` 이라고 명시해두었으니 말이죠.\n\n![230917-211924](/posts/004_dart_advanced/230917-211924.png)\n\nfuture는 `Uncompleted`, `Completed` 상태를 갖습니다.\n비동기 함수 호출시에 future은 Uncompleted 상태를 갖습니다.\n따라서 `Instance of 'Future<String>'`와 같은 결과를 출력한 것이죠.\n하지만 함수가 성공적으로 종료되면 future은 비로소 Completed 상태를 갖습니다.\n따라서 `future string`과 같은 결과를 출력하게 될 것입니다.\n\n사용자 입장에서는 Future 객체는 중요하지 않습니다. 중요한 것은 Future 객체가 처리되고 나서 반환되는 데이터인거죠.\n따라서, Future 객체의 처리(비동기 함수)를 원활히 하기위해 `async`, `await` 키워드를 사용하는 것입니다.\n\n### async\n\nasync 키워드는 이 함수가 비동기 처리를 수행하는 함수임을 명시하는 키워드 입니다.\n다만 위의 예시에서 보듯, 반드시 `Future<T>` 객체 또는 `void`를 반환해야만 합니다.\n\n그렇다면, main 함수를 async 키워드를 붙여 실행한다면 제대로된 결과가 나올까요?\n\n```dart:.dart\nFuture<String> futureStr() async {\n  print('do something');\n  return Future.delayed(Duration(seconds: 2), () => 'future string');\n}\n\nvoid main() async {\n  print('start');\n  print(futureStr());\n}\n```\n\n> start\n> do something\n> Instance of 'Future\\<String\\>'\n> (2초 후 종료)\n\n그렇습니다. 함수를 비동기 처리하는 함수로 선언한다고 해서 해결되지는 않습니다.\n함수 내부에서 비동기 처리가 진행될 수 있다는 것을 암시할 뿐, `어디서` 비동기 처리를 해야하는 지는 명시하지 않았기 때문이죠.\n\n### await\n\nawait 키워드는 **해당 키워드가 명시된 비동기 처리**(futureStr)가 완료될 때 까지 **비동기 함수**(main)의 처리를 `멈추겠다`는 의미입니다.\n그렇기에 await 키워드는 반드시 async 키워드가 명시된 함수 내부에서만 사용할 수 있는 것입니다.\n\n그렇다면 futureStr의 함수 앞에 await를 명시하여 비동기 함수가 끝날 때 까지 대기시킨다면 어떨까요?\n\n```dart:.dart\nFuture<String> futureStr() async {\n  print('do something');\n  // return Future.delayed(Duration(seconds: 2), () => 'future string');\n  await Future.delayed(Duration(seconds: 2));\n  return 'future string';\n}\n\n\nvoid main() async {\n  print('start');\n  print(await futureStr());\n}\n```\n\n> start\n> do something\n> (2초 대기)\n> future string\n> (즉시 종료)\n\n비로소 원하던 결과가 나왔습니다.\n\n---\n\n## Isolate\n\n`Isolate`는 Dart에서 스레드를 부르는 용어라고 생각하시면 됩니다.\n\n![230917-221122](/posts/004_dart_advanced/230917-221122.png)\n\nIsolate는 스레드와 마찬가지로 멀티 코어 CPU의 장점을 살리는 프로그래밍 기법으로 `별도의 이벤트 루프`를 갖는 실행 흐름을 만들어 `병렬적인 처리`를 가능케 합니다.\n하지만, 스레드와 용어에서의 차이점을 두는 이유가 있습니다.\n\n보통 **스레드**라 하면 `메모리 영역을 공유`한다고 배웠습니다. 하지만 그 때문에 `race-condition`이 발생하는 문제점을 고려하여 프로그래밍을 했어야 합니다.\n\n하지만, **Isolate**는 스레드와 다르게 `메모리 영역 또한 공유하지 않습니다`.(물론 코드 영역은 공유합니다) \n그렇기에 mutex, lock 등을 고려할 필요가 없는 편의성이 있습니다.\n\n하지만 왜 Isolate를 알아야 하고, 사용해야만 할까요?\n\n### Isolate vs Async\n\n아래의 영상을 확인해봅시다.\n\n<YT id='HkBaS098BrE' />\n\n`Main isolate`부분은 json 데이터 파싱과 화면 빌드를 `하나의 isolate`에서 구동한 결과입니다.\n영상에서 보시는 바와 같듯 십몇만줄의 json 파싱은 단일 isolate 환경에서 구동하기에는 다소 무리가 있습니다.\n아무리 async로 실행 결과를 뒤로 미룬다 할지라도 실제 데이터 파싱하는 동작과 화면을 그리는 동작 모두 `동일한 isolate`에서 처리되기 때문에 `성능상 이슈`가 생길 수 밖에 없습니다.\n\n하지만 `Worker isolate`부분은 json 데이터 파싱을 `별도의 worker isolate`에서 구동한 결과입니다.\n차이는 명확합니다. 화면에 그리는 동작과 파싱 동작이 `별도의 isolate`에서 처리되기 때문에 화면을 그리는 부분에서 `랙이 걸리지 않습니다`.\n\n이렇듯 단일 isolate에서 동작이 버벅일 정도로 무거운 기능을 수행해야 한다면, 해당 기능은 별도의 isolate로 빼서 처리하는 것이 사용자에게 더 나은 경험을 제공하게 됩니다.\n\n해당 영상에서 구동하는 코드는 [**`Arkhive repo`**](https://github.com/wjlee611/arkhive/blob/main/lib/bloc/enemy/enemy_data/enemy_data_bloc.dart)에서 확인하실 수 있습니다.\n\n---\n\n## function\n\n### callback function\n\n콜백 함수는 함수의 인자로 넘겨주어 넘겨받은 함수 내부에서 실행 가능한 함수를 의미합니다.\n예시를 살펴봅시다.\n\n```dart:.dart\nvoid main() {\n  int value = 0;\n\n  print(valueModifire(value: value, modifire: add1)); // 1\n  print(valueModifire(value: value, modifire: sub1)); // -1\n}\n\nint add1(int value) => value + 1;\nint sub1(int value) => value - 1;\n\nint valueModifire({\n  required int value,\n  required Function(int) modifire,\n}) {\n  return modifire(value);\n}\n```\n\n위 코드에서는 `valueModifire`의 인자로서 `add1`, `sub1`을 전달했습니다.\n이 때, 이 두 함수를 `callback function`라고 부르고, 이 함수는 valueModifire 내부에서 `modifire`의 형태로 호출됩니다.\n\n보통은 이런식으로 `동일한 함수` 내부에서 `서로 다른 기능`을 수행해야 할 때 콜백 함수로서 전달하는 경우가 많습니다.\n\n```dart:.dart\nvoid main() async {\n  int value = 0;\n\n  print(await valueModifire(value: value, modifire: add1)); // await 1 second -> 1\n  print(await valueModifire(value: value, modifire: sub1)); // await 1 second -> -1\n}\n\nint add1(int value) => value + 1;\nint sub1(int value) => value - 1;\n\nFuture<int> valueModifire({\n  required int value,\n  required Function(int) modifire,\n}) async {\n  await Future.delayed(Duration(seconds: 1)); // something actions\n  return modifire(value);\n}\n```\n\n또는, `특정 함수의 동작이 끝난 후` 수행해야 할 기능이 있을 때 많이 사용되곤 합니다.","slug":"flutter/004_dart_advanced","readingMinutes":10,"wordCount":836},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    code: \"code\",\n    h2: \"h2\",\n    span: \"span\",\n    br: \"br\",\n    h3: \"h3\",\n    div: \"div\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    img: \"img\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {YT} = _components;\n  if (!YT) _missingMdxReference(\"YT\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"notice\", {\n      children: _jsxs(_components.p, {\n        children: [\"기초적인 지식이 필요하신 분들은 \", _jsx(_components.a, {\n          href: \"https://wjlee611.github.io/blog/flutter/003_dart_basic\",\n          children: _jsx(_components.strong, {\n            children: _jsx(_components.code, {\n              children: \"Dart 언어 기초\"\n            })\n          })\n        }), \" 포스트를 읽어보시길 권장드립니다.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"async--await\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#async--await\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"async / await\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"async\"\n      }), \", \", _jsx(_components.code, {\n        children: \"await\"\n      }), \" 키워드는 \", _jsx(_components.strong, {\n        children: \"비동기 프로그래밍\"\n      }), \"시 빠지지 않는 키워드입니다.\", _jsx(_components.br, {}), \"\\n\", \"여기서 \", _jsx(_components.code, {\n        children: \".then()\"\n      }), \" 메서드나 Dart 에서 \", _jsx(_components.code, {\n        children: \"Future<T>\"\n      }), \" 도 포함해서 원리와 적절한 사용법까지 알아보고자 합니다.\"]\n    }), \"\\n\", _jsx(\"tip\", {\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"비동기 프로그래밍\"\n        }), _jsx(_components.br, {}), \"\\n\", \"특정 코드가 완료되기 전, 다른 코드를 수행함으로서 코드의 실행 순서가 순차적(동기적)으로 실행되지 않는 프로그래밍 방식입니다.\", _jsx(_components.br, {}), \"\\n\", \"보통 처리완료까지 시간이 많이 걸리는 네트워크 통신이나 파일 입출력 등에 많이 사용됩니다.\"]\n      })\n    }), \"\\n\", _jsxs(\"notice\", {\n      children: [_jsxs(_components.p, {\n        children: [\"비동기 처리는 \", _jsx(_components.code, {\n          children: \"단일 스레드(Dart의 경우 단일 Isolate) 환경\"\n        }), \"에서 이루어집니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 비동기 처리를 한다고 해도, 비동기 함수가 \", _jsx(_components.code, {\n          children: \"컴퓨팅 자원 사용량이 많다\"\n        }), \"면 해당 스레드(Isolate)는 \", _jsx(_components.code, {\n          children: \"일시 정지\"\n        }), \"되는 현상이 발생할 수 있습니다.\"]\n      }), _jsx(\"br\", {}), _jsxs(_components.p, {\n        children: [\"이와 관련한 자세한 내용은 아래 \", _jsx(_components.a, {\n          href: \"https://wjlee611.github.io/blog/flutter/004_dart_advanced#isolate\",\n          children: _jsx(_components.strong, {\n            children: _jsx(_components.code, {\n              children: \"Isolate\"\n            })\n          })\n        }), \" 파트에서 다루겠습니다.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"future\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#future\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Future\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Future\"\n      }), \" 객체는 지금 당장은 처리되지 않았지만, 미래에 처리가 완료될 데이터를 알려주는 객체입니다.\", _jsx(_components.br, {}), \"\\n\", \"예를 들어봅시다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"String\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'do something'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"delayed\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Duration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"seconds\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'future string'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'start'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위의 futureStr() 함수는 호출 후 2초뒤에 'future string'을 반환하는 함수입니다.\", _jsx(_components.br, {}), \"\\n\", \"실행결과는 어떻게 될까요?\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"start\", _jsx(_components.br, {}), \"\\n\", \"do something\", _jsx(_components.br, {}), \"\\n\", \"Instance of 'Future<String>'\", _jsx(_components.br, {}), \"\\n\", \"(2초 후 종료)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"답은 \", _jsx(_components.code, {\n        children: \"future 객체\"\n      }), \" 입니다.\", _jsx(_components.br, {}), \"\\n\", \"어찌보면 당연합니다. \", _jsx(_components.code, {\n        children: \"main\"\n      }), \" 함수는 비동기 함수도 아닐 뿐더러 futureStr의 리턴값은 \", _jsx(_components.code, {\n        children: \"Future<String>\"\n      }), \" 이라고 명시해두었으니 말이죠.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/004_dart_advanced/230917-211924.png\",\n        alt: \"230917-211924\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"future는 \", _jsx(_components.code, {\n        children: \"Uncompleted\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Completed\"\n      }), \" 상태를 갖습니다.\", _jsx(_components.br, {}), \"\\n\", \"비동기 함수 호출시에 future은 Uncompleted 상태를 갖습니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 \", _jsx(_components.code, {\n        children: \"Instance of 'Future<String>'\"\n      }), \"와 같은 결과를 출력한 것이죠.\", _jsx(_components.br, {}), \"\\n\", \"하지만 함수가 성공적으로 종료되면 future은 비로소 Completed 상태를 갖습니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 \", _jsx(_components.code, {\n        children: \"future string\"\n      }), \"과 같은 결과를 출력하게 될 것입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"사용자 입장에서는 Future 객체는 중요하지 않습니다. 중요한 것은 Future 객체가 처리되고 나서 반환되는 데이터인거죠.\", _jsx(_components.br, {}), \"\\n\", \"따라서, Future 객체의 처리(비동기 함수)를 원활히 하기위해 \", _jsx(_components.code, {\n        children: \"async\"\n      }), \", \", _jsx(_components.code, {\n        children: \"await\"\n      }), \" 키워드를 사용하는 것입니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"async\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#async\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"async\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"async 키워드는 이 함수가 비동기 처리를 수행하는 함수임을 명시하는 키워드 입니다.\", _jsx(_components.br, {}), \"\\n\", \"다만 위의 예시에서 보듯, 반드시 \", _jsx(_components.code, {\n        children: \"Future<T>\"\n      }), \" 객체 또는 \", _jsx(_components.code, {\n        children: \"void\"\n      }), \"를 반환해야만 합니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그렇다면, main 함수를 async 키워드를 붙여 실행한다면 제대로된 결과가 나올까요?\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"String\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'do something'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"delayed\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Duration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"seconds\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'future string'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'start'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"start\", _jsx(_components.br, {}), \"\\n\", \"do something\", _jsx(_components.br, {}), \"\\n\", \"Instance of 'Future<String>'\", _jsx(_components.br, {}), \"\\n\", \"(2초 후 종료)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그렇습니다. 함수를 비동기 처리하는 함수로 선언한다고 해서 해결되지는 않습니다.\", _jsx(_components.br, {}), \"\\n\", \"함수 내부에서 비동기 처리가 진행될 수 있다는 것을 암시할 뿐, \", _jsx(_components.code, {\n        children: \"어디서\"\n      }), \" 비동기 처리를 해야하는 지는 명시하지 않았기 때문이죠.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"await\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#await\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"await\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"await 키워드는 \", _jsx(_components.strong, {\n        children: \"해당 키워드가 명시된 비동기 처리\"\n      }), \"(futureStr)가 완료될 때 까지 \", _jsx(_components.strong, {\n        children: \"비동기 함수\"\n      }), \"(main)의 처리를 \", _jsx(_components.code, {\n        children: \"멈추겠다\"\n      }), \"는 의미입니다.\", _jsx(_components.br, {}), \"\\n\", \"그렇기에 await 키워드는 반드시 async 키워드가 명시된 함수 내부에서만 사용할 수 있는 것입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그렇다면 futureStr의 함수 앞에 await를 명시하여 비동기 함수가 끝날 때 까지 대기시킨다면 어떨까요?\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"String\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'do something'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// return Future.delayed(Duration(seconds: 2), () => 'future string');\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"await\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"delayed\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Duration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"seconds\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"2\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'future string'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'start'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"await\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"futureStr\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"start\", _jsx(_components.br, {}), \"\\n\", \"do something\", _jsx(_components.br, {}), \"\\n\", \"(2초 대기)\", _jsx(_components.br, {}), \"\\n\", \"future string\", _jsx(_components.br, {}), \"\\n\", \"(즉시 종료)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"비로소 원하던 결과가 나왔습니다.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"isolate\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#isolate\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Isolate\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Isolate\"\n      }), \"는 Dart에서 스레드를 부르는 용어라고 생각하시면 됩니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/004_dart_advanced/230917-221122.png\",\n        alt: \"230917-221122\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Isolate는 스레드와 마찬가지로 멀티 코어 CPU의 장점을 살리는 프로그래밍 기법으로 \", _jsx(_components.code, {\n        children: \"별도의 이벤트 루프\"\n      }), \"를 갖는 실행 흐름을 만들어 \", _jsx(_components.code, {\n        children: \"병렬적인 처리\"\n      }), \"를 가능케 합니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만, 스레드와 용어에서의 차이점을 두는 이유가 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"보통 \", _jsx(_components.strong, {\n        children: \"스레드\"\n      }), \"라 하면 \", _jsx(_components.code, {\n        children: \"메모리 영역을 공유\"\n      }), \"한다고 배웠습니다. 하지만 그 때문에 \", _jsx(_components.code, {\n        children: \"race-condition\"\n      }), \"이 발생하는 문제점을 고려하여 프로그래밍을 했어야 합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"하지만, \", _jsx(_components.strong, {\n        children: \"Isolate\"\n      }), \"는 스레드와 다르게 \", _jsx(_components.code, {\n        children: \"메모리 영역 또한 공유하지 않습니다\"\n      }), \".(물론 코드 영역은 공유합니다)\", _jsx(_components.br, {}), \"\\n\", \"그렇기에 mutex, lock 등을 고려할 필요가 없는 편의성이 있습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 왜 Isolate를 알아야 하고, 사용해야만 할까요?\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"isolate-vs-async\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#isolate-vs-async\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Isolate vs Async\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래의 영상을 확인해봅시다.\"\n    }), \"\\n\", _jsx(YT, {\n      id: \"HkBaS098BrE\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Main isolate\"\n      }), \"부분은 json 데이터 파싱과 화면 빌드를 \", _jsx(_components.code, {\n        children: \"하나의 isolate\"\n      }), \"에서 구동한 결과입니다.\", _jsx(_components.br, {}), \"\\n\", \"영상에서 보시는 바와 같듯 십몇만줄의 json 파싱은 단일 isolate 환경에서 구동하기에는 다소 무리가 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"아무리 async로 실행 결과를 뒤로 미룬다 할지라도 실제 데이터 파싱하는 동작과 화면을 그리는 동작 모두 \", _jsx(_components.code, {\n        children: \"동일한 isolate\"\n      }), \"에서 처리되기 때문에 \", _jsx(_components.code, {\n        children: \"성능상 이슈\"\n      }), \"가 생길 수 밖에 없습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"하지만 \", _jsx(_components.code, {\n        children: \"Worker isolate\"\n      }), \"부분은 json 데이터 파싱을 \", _jsx(_components.code, {\n        children: \"별도의 worker isolate\"\n      }), \"에서 구동한 결과입니다.\", _jsx(_components.br, {}), \"\\n\", \"차이는 명확합니다. 화면에 그리는 동작과 파싱 동작이 \", _jsx(_components.code, {\n        children: \"별도의 isolate\"\n      }), \"에서 처리되기 때문에 화면을 그리는 부분에서 \", _jsx(_components.code, {\n        children: \"랙이 걸리지 않습니다\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇듯 단일 isolate에서 동작이 버벅일 정도로 무거운 기능을 수행해야 한다면, 해당 기능은 별도의 isolate로 빼서 처리하는 것이 사용자에게 더 나은 경험을 제공하게 됩니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"해당 영상에서 구동하는 코드는 \", _jsx(_components.a, {\n        href: \"https://github.com/wjlee611/arkhive/blob/main/lib/bloc/enemy/enemy_data/enemy_data_bloc.dart\",\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"Arkhive repo\"\n          })\n        })\n      }), \"에서 확인하실 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"function\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#function\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"function\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"callback-function\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#callback-function\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"callback function\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"콜백 함수는 함수의 인자로 넘겨주어 넘겨받은 함수 내부에서 실행 가능한 함수를 의미합니다.\", _jsx(_components.br, {}), \"\\n\", \"예시를 살펴봅시다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  int value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" add1\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// 1\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" sub1\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// -1\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"int \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"int \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sub1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"int \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  required int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  required \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Function\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"modifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 코드에서는 \", _jsx(_components.code, {\n        children: \"valueModifire\"\n      }), \"의 인자로서 \", _jsx(_components.code, {\n        children: \"add1\"\n      }), \", \", _jsx(_components.code, {\n        children: \"sub1\"\n      }), \"을 전달했습니다.\", _jsx(_components.br, {}), \"\\n\", \"이 때, 이 두 함수를 \", _jsx(_components.code, {\n        children: \"callback function\"\n      }), \"라고 부르고, 이 함수는 valueModifire 내부에서 \", _jsx(_components.code, {\n        children: \"modifire\"\n      }), \"의 형태로 호출됩니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"보통은 이런식으로 \", _jsx(_components.code, {\n        children: \"동일한 함수\"\n      }), \" 내부에서 \", _jsx(_components.code, {\n        children: \"서로 다른 기능\"\n      }), \"을 수행해야 할 때 콜백 함수로서 전달하는 경우가 많습니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  int value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"await\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" add1\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// await 1 second -> 1\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"print\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"await\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" sub1\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// await 1 second -> -1\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"int \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"add1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"+\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"int \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sub1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" value \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsxs(_components.span, {\n            className: \"token generics\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), \"int\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \">\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"valueModifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  required int value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  required \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Function\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" modifire\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"async\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"await\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Future\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"delayed\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Duration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"seconds\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// something actions\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"modifire\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"value\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"또는, \", _jsx(_components.code, {\n        children: \"특정 함수의 동작이 끝난 후\"\n      }), \" 수행해야 할 기능이 있을 때 많이 사용되곤 합니다.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"toc":[{"slug":"async--await","text":"async / await","subSections":[{"slug":"future","text":"Future"},{"slug":"async","text":"async"},{"slug":"await","text":"await"}]},{"slug":"isolate","text":"Isolate","subSections":[{"slug":"isolate-vs-async","text":"Isolate vs Async"}]},{"slug":"function","text":"function","subSections":[{"slug":"callback-function","text":"callback function"}]}]},"__N_SSG":true}