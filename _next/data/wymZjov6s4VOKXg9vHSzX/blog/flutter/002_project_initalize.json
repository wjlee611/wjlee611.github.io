{"pageProps":{"post":{"title":"플러터 프로젝트 만들기","description":"플러터 프로젝트 생성 가이드 입니다.","icon":"","image":"","tags":["Flutter","Getting started"],"draft":false,"date":"2023-09-14","content":"\n## 시작 전 주의사항\n\n<notice>\n  이 포스트에선 플러터 프로젝트를 생성하는 방법을 다뤄봅니다.\n  따라서 플러터 SDK 설치나, 관련 환경설정이 안되신 분은 [**`플러터 시작하기`**](https://wjlee611.github.io/blog/flutter/001_installation)를 꼭 읽어보시고 다시 와주시기 바랍니다.\n</notice>\n\n<notice>\n  본 블로그의 플러터 개발환경은 `VSCode`와 `터미널`로 고정됩니다.\n  따라서 다른 개발환경에 대한 정보는 없으므로 이 점 참고 부탁드립니다.\n</notice>\n\n## 프로젝트 생성\n\n프로젝트 생성을 위해 우선 본인이 프로젝트를 관리할 폴더로 이동해주세요.\n제 경우에는 깃허브로 버전관리를 하는 프로젝트의 경우 `~/Documents/GitHub` 폴더에서 일괄적으로 관리하는 편입니다.\n\n```bash:Terminal\ncd ~/Documents/GitHub\n```\n\n이후에는 아래의 명령어로 플러터 프로젝트를 생성합니다.\n\n```bash:Terminal\nflutter create <proj_name>\n```\n\n이 때, 프로젝트를 생성할 때 알아두면 유용한 (거의 필수) 몇 가지 옵션을 소개드립니다.\n\n### --org\n\n이 옵션을 지정하면 프로젝트를 생성할 때 패키지명을 지정할 수 있습니다.\n\n```bash:Terminal\nflutter create <proj_name> --org <package_name>\n```\n\n<notice>\n  \\<package_name\\>이 100% 동일하게 패키지 이름이 되는 것은 아닙니다.\n  옵션명에서 유추할 수 있듯 기관의 이름을 적는 것입니다.\n\n  따라서 진짜 패키지 이름은 `<package_name>.<proj_name>` 형식이 됩니다.\n</notice>\n\n예로들어 아래와 같이 프로젝트를 생성했다고 가정해봅시다.\n\n![230914-164837](/posts/002_project_initalize/230914-164837.png)\n\n이 경우에는 프로젝트명 - `gdsc_study` / 패키지명 - `com.gmail.wjlee611` 입니다.\n따라서 프로젝트에서 실제로 적용되는 패키지명은 아래와 같아집니다.\n\n![230914-165226](/posts/002_project_initalize/230914-165226.png)\n\n> Android - `com.gmail.wjlee611.gdsc_study`\n> iOS - `com.gmail.wjlee611.gdscStudy`\n\n같은 명령어라도 다른 패키지명이 생성되니 나중에 앱을 배포할 때 반드시 패키지명을 확인하도록 합시다.\n\n### -i swift\n\n기본적으로 생성되는 iOS 코드는 `Objective-C` 입니다.\n하지만 이 옵션을 추가하면 `Swift`로 생성되게 됩니다.\n\n### -a kotlin\n\n기본적으로 생성되는 Android 코드는 `Java` 입니다.\n하지만 이 옵션을 추가하면 `Kotlin`으로 생성되게 됩니다.\n\n\n","slug":"flutter/002_project_initalize","readingMinutes":3,"wordCount":223},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    br: \"br\",\n    strong: \"strong\",\n    code: \"code\",\n    div: \"div\",\n    pre: \"pre\",\n    h3: \"h3\",\n    img: \"img\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"시작-전-주의사항\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#시작-전-주의사항\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"시작 전 주의사항\"]\n    }), \"\\n\", _jsx(\"notice\", {\n      children: _jsxs(_components.p, {\n        children: [\"이 포스트에선 플러터 프로젝트를 생성하는 방법을 다뤄봅니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 플러터 SDK 설치나, 관련 환경설정이 안되신 분은 \", _jsx(_components.a, {\n          href: \"https://wjlee611.github.io/blog/flutter/001_installation\",\n          children: _jsx(_components.strong, {\n            children: _jsx(_components.code, {\n              children: \"플러터 시작하기\"\n            })\n          })\n        }), \"를 꼭 읽어보시고 다시 와주시기 바랍니다.\"]\n      })\n    }), \"\\n\", _jsx(\"notice\", {\n      children: _jsxs(_components.p, {\n        children: [\"본 블로그의 플러터 개발환경은 \", _jsx(_components.code, {\n          children: \"VSCode\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"터미널\"\n        }), \"로 고정됩니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 다른 개발환경에 대한 정보는 없으므로 이 점 참고 부탁드립니다.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"프로젝트-생성\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#프로젝트-생성\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"프로젝트 생성\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로젝트 생성을 위해 우선 본인이 프로젝트를 관리할 폴더로 이동해주세요.\", _jsx(_components.br, {}), \"\\n\", \"제 경우에는 깃허브로 버전관리를 하는 프로젝트의 경우 \", _jsx(_components.code, {\n        children: \"~/Documents/GitHub\"\n      }), \" 폴더에서 일괄적으로 관리하는 편입니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token builtin class-name\",\n            children: \"cd\"\n          }), \" ~/Documents/GitHub\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이후에는 아래의 명령어로 플러터 프로젝트를 생성합니다.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"flutter create \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"proj_name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 때, 프로젝트를 생성할 때 알아두면 유용한 (거의 필수) 몇 가지 옵션을 소개드립니다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"--org\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#--org\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"--org\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 옵션을 지정하면 프로젝트를 생성할 때 패키지명을 지정할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"flutter create \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"proj_name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--org\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"package_name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(\"notice\", {\n      children: [_jsxs(_components.p, {\n        children: [\"<package_name>이 100% 동일하게 패키지 이름이 되는 것은 아닙니다.\", _jsx(_components.br, {}), \"\\n\", \"옵션명에서 유추할 수 있듯 기관의 이름을 적는 것입니다.\"]\n      }), _jsxs(_components.p, {\n        children: [\"따라서 진짜 패키지 이름은 \", _jsx(_components.code, {\n          children: \"<package_name>.<proj_name>\"\n        }), \" 형식이 됩니다.\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예로들어 아래와 같이 프로젝트를 생성했다고 가정해봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/002_project_initalize/230914-164837.png\",\n        alt: \"230914-164837\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 경우에는 프로젝트명 - \", _jsx(_components.code, {\n        children: \"gdsc_study\"\n      }), \" / 패키지명 - \", _jsx(_components.code, {\n        children: \"com.gmail.wjlee611\"\n      }), \" 입니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 프로젝트에서 실제로 적용되는 패키지명은 아래와 같아집니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/002_project_initalize/230914-165226.png\",\n        alt: \"230914-165226\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Android - \", _jsx(_components.code, {\n          children: \"com.gmail.wjlee611.gdsc_study\"\n        }), _jsx(_components.br, {}), \"\\n\", \"iOS - \", _jsx(_components.code, {\n          children: \"com.gmail.wjlee611.gdscStudy\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"같은 명령어라도 다른 패키지명이 생성되니 나중에 앱을 배포할 때 반드시 패키지명을 확인하도록 합시다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"-i-swift\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#-i-swift\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"-i swift\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기본적으로 생성되는 iOS 코드는 \", _jsx(_components.code, {\n        children: \"Objective-C\"\n      }), \" 입니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 이 옵션을 추가하면 \", _jsx(_components.code, {\n        children: \"Swift\"\n      }), \"로 생성되게 됩니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"-a-kotlin\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#-a-kotlin\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"-a kotlin\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기본적으로 생성되는 Android 코드는 \", _jsx(_components.code, {\n        children: \"Java\"\n      }), \" 입니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 이 옵션을 추가하면 \", _jsx(_components.code, {\n        children: \"Kotlin\"\n      }), \"으로 생성되게 됩니다.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"toc":[{"slug":"시작-전-주의사항","text":"시작 전 주의사항","subSections":[]},{"slug":"프로젝트-생성","text":"프로젝트 생성","subSections":[{"slug":"--org","text":"--org"},{"slug":"-i-swift","text":"-i swift"},{"slug":"-a-kotlin","text":"-a kotlin"}]}]},"__N_SSG":true}