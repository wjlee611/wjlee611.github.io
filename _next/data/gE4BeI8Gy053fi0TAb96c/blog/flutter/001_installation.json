{"pageProps":{"post":{"title":"플러터 시작하기","description":"플러터 설치 및 VSCode 세팅 가이드입니다.","icon":"","image":"","tags":["Flutter","VSCode","Package manager"],"draft":false,"date":"2023-09-13","content":"\n## 들어가며...\n\n이 포스트에선 플러터(Flutter) 개발을 시작할 때 세팅해야할 전 과정에 대해 설명합니다.\nFlutter SDK 설치부터 에뮬레이터 세팅, VSCode 세팅, 추가로 유용한 단축키에 대해서 알아봅니다.\n다만, 단축키는 운영체제, 에디터 환경, 설정에 따라 다를 수 있으니 이점 참고 바랍니다.\n\n> **이미 설치를 완료하신 분들도 시간 내셔서 `VSCode 세팅`부터 읽어보시는 것을 강력 추천드립니다.**\n\n블로그 주인장은 M1 Mac 환경에서 세팅하였기에 리눅스 계열 세팅방법을 기준으로 다뤄봅니다만,\n윈도우 머신에서의 세팅도 다뤄볼 겁니다. (다만, 실제 테스트는 하지 않았기에 오류가 있을지도 모릅니다)\n\n참고로 아래의 모든 설치과정은 [**노마드코더**](https://nomadcoders.co/flutter-for-beginners)의 강좌를 정리한 자료입니다.\n\n- https://nomadcoders.co/flutter-for-beginners/lectures/4133\n- https://nomadcoders.co/flutter-for-beginners/lectures/4142\n\n---\n\n## Flutter SDK 설치\n\nFlutter SDK를 설치할 때 방법이 크게 두 가지로 나뉩니다.\n첫 번째는 Flutter 공식 사이트에서 제공하는 방식을 따라가는 방법\n두 번째는 패키지 매니저를 이용해서 설치하는 방법\n\n제 개인적인 생각에는 패키지 매니저를 이용하는 방법이 더 간단해 보입니다.\n첫 번째 방법을 따라하려면 환경 PATH도 설정해야 하기에 좀 무서워 보이기 때문이죠...\n~_(그리고 제가 이 방법밖에 안해보기도 했구요...)_~\n\n그래도 일단은 두 방법 모두 소개해 드리겠습니다.\n\n### 공식 사이트\n\n1. [**플러터 공식 페이지**](https://flutter.dev)로 접속합니다.\n\n2. `Get started`로 들어갑니다.\n   ![230913-211858](/posts/001_installation/230913-211858.png)\n\n3. 본인 운영체제에 맞는 Flutter SDK를 설치합니다.\n   ![230913-212121](/posts/001_installation/230913-212121.png)\n\n   이후에는 공식 사이트에서 제공하는 문서를 천천히 따라하시면 됩니다.\n\n---\n\n### 패키지 매니저 (MacOS)\n\n1. [**Homebrew**](https://brew.sh/)에 들어갑니다.\n   ![230913-214251](/posts/001_installation/230913-214251.png)\n\n   _참고로 Homebrew는 MacOS에서 사용할 수 있는 **대부분의 개발자도구를 터미널로 설치할 수 있는 강력한 도구**입니다._\n   _Flutter가 아니더라도 **반드시** 설치하는게 정신건강에 이롭습니다._\n\n2. `터미널`을 열어줍니다.\n\n3. 아래의 명령어를 입력하여 Homebrew를 설치합니다.\n   (공식 사이트에서 복사하는 것을 권장합니다)\n\n```bash:Terminal\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n4. 아래의 명령어로 Flutter SDK를 설치합니다.\n\n```bash:Terminal\nbrew install --cask flutter\n```\n\n---\n\n### 패키지 매니저 (Windows)\n\n1. [**Chocolatey - individual**](https://chocolatey.org/install#individual)에 들어갑니다.\n   ![230913-213419](/posts/001_installation/230913-213419.png)\n\n2. `PowerShell`을 관리자 권한으로 실행합니다.\n\n3. 아래의 명령어를 입력하여 Chocolatey를 설치합니다.\n\n```shell:PowerShell\nGet-ExecutionPolicy\n```\n\n만약 `Restricted` 라고 뜬다면 아래의 명령어 중 하나를 입력하면 됩니다.\n\n```shell:PowerShell\nSet-ExecutionPolicy AllSigned\n또는\nSet-ExecutionPolicy Bypass -Scope Process\n```\n\n그 이후에 아래의 긴- 명령어를 입력합니다.\n(공식 사이트에서 복사하는 것을 권장합니다)\n\n```shell:PowerShell\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n```\n\n`Chocolatey` 설치가 완료되었다면 `choco` 라는 명령어가 실행 가능할 겁니다.\n\n4. 아래의 명령어로 Flutter SDK를 설치합니다.\n\n```shell:PowerShell\nchoco install flutter\n```\n\n### 설치 확인 방법 (1)\n\n터미널 창에 `flutter` 를 입력해봅시다.\n`Command not found` 와 같은 에러를 제외하고 뭐라도 뜬다면 설치가 완료된 것입니다.\n\n---\n\n## 애뮬레이터 설치\n\n아래의 공식 문서를 통해 설치하는 것이 가장 바람직합니다.\n설명도 친절해서 왠만하면 설치하는데 문제가 없을겁니다. (아예 없진 않음...)\n관련 링크를 아래에 정리합니다.\n\n🫧[**MacOS - ios setup**](https://docs.flutter.dev/get-started/install/macos#ios-setup)\n🫧[**MacOS - android setup**](https://docs.flutter.dev/get-started/install/macos#android-setup)\n\n🫧[**Windows - android setup**](https://docs.flutter.dev/get-started/install/windows#android-setup)\n\n### 설치 확인 방법 (2)\n\n터미널 창에 `flutter doctor` 를 입력해봅시다.\n![230913-220216](/posts/001_installation/230913-220216.png)\n\nSDK, 애뮬레이터, 에디터까지 발생하는 문제사항을 한 눈에 파악할 수 있습니다.\n\n참고로 최초 실행시 안드로이드 라이센스에 동의하라는 에러 혹은 경고가 나타날 수 있습니다.\n그럴 땐 당황하지 마시고 아래의 명령어를 입력하면 됩니다.\n(_설치할 때 꼼꼼히 읽어보면 이런 내용도 있다는 걸 확인할 수 있죠..._)\n\n```bash:Terminal\nflutter doctor --android-licenses\n```\n\n### Troubleshooting\n\n간혹가다 Xcode `command line tools`에서 문제가 발생하는 경우가 있습니다.\n명령어 라인 도구는 Xcode를 설치할 때 자동적으로 설치됩니다.\n\n하지만 제 경우에는 Xcode를 설치하기 전에 아래의 명령어로 미리 설치한 적이 있었습니다.\n\n```bash:Terminal\nxcode-select --install\n```\n\n명령어 라인 도구를 먼저 설치하고 Xcode를 설치하면 가끔 정상동작하지 않는 에러가 발생하는 거 같습니다.\n이런 경우에는 명령어 라인 도구를 제거하고 다시 설치하면 해결됩니다.\n\n---\n\n## VSCode 세팅\n\n사실 마켓플레이스에서 `Flutter`, `Dart` 확장을 설치하기만 하면 개발할 준비가 끝나긴 합니다.\n하지만, 개발 편의성과 코드 통일을 위해서 필요한, 혹은 유용한 `확장`과 `setting.json`을 공유할까 합니다.\n\n### setting.json\n\n아래와 같은 키값을 추가하면 개발에 있어 편의성이 증진됩니다.\n하지만, 설정을 건드릴 땐, 본인의 설정과 충돌이 생기는지 반드시 확인한 후에 추가하시는 것을 권장합니다.\n\n참고로, setting.json은 `명령 팔레트`를 열고 `settings.json`을 검색하면 바로 나옵니다.\n또 참고로, 명령 팔레트는 `Command(Window) + Shift + P` 명령어 조합으로 열 수 있습니다.\n\n```json:settings.json showLineNumbers\n{\n  ...\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true\n  },\n  \"dart.previewFlutterUiGuides\": true,\n}\n```\n\n`Line 3-5`의 설정은 자동으로 필요한 모든 곳에 `const` 키워드를 삽입해주는 설정입니다.\nflutter에서 const를 사용하는 것은 매우 중요한데 그 이유에 대해서는 다음에 설명하도록 하겠습니다.\n일단은 가능하다면 반드시 const를 붙이는게 좋고, 이를 자동으로 붙여줄 수 있다는 것만 기억합니다.\n\n`Line 6`의 설정은 flutter 위젯을 트리 구조로 선으로 연결해주는 설정입니다.\n![230913-222546](/posts/001_installation/230913-222546.png)\n\nflutter은 위젯의 depth가 깊어지는 단점이 있는데 이를 어느정도 극복하게 해주는 유용한 설정입니다.\n\n### Error Lens\n\n![230913-223129](/posts/001_installation/230913-223129.png)\n\nError Lens는 코드 문제의 원인을 에디터상에 바로 띄워주는 확장입니다.\n실시간으로 무슨 에러가 있는지 한 눈에 확인할 수 있는게 개인적으로 매우 만족하면서 사용하고 있습니다.\n\n![230913-223528](/posts/001_installation/230913-223528.png)\n\n개인적으로 눈뽕(?) 방지를 위해 `line` 이 아닌, `message` 로 설정하는 것을 추천드립니다.\n\n![230913-224036](/posts/001_installation/230913-224036.png)\n\n또한, 분석 레벨에서 `info` 는 제거해주시는 것을 추천 드립니다.\n\nflutter의 경우 info가 중첩되서 뜨는 경우가 많기에 위 두 세팅을 바꾸지 않으면 아래와 같은 눈뽕(?)을 자주 겪게 될 지도 모릅니다...\n![230913-223954](/posts/001_installation/230913-223954.png)\n\n### Image preview\n\n![230913-224456](/posts/001_installation/230913-224456.png)\n\nImage preview는 로컬, 네트워크 이미지를 미리보기 형식으로 띄워주는 확장입니다.\nFE 개발 입장에서 이미지나 svg, icon을 사용할 일이 많은데, 이를 미리볼 수 있다는 것 만으로도 많은 시간을 절약할 수 있습니다.\n\n---\n\n## VSCode 단축키\n\n개발 시간을 줄여주는 유용한 단축키 및 snippets 를 소개합니다.\n\n### Code Action\n\n![230913-224956](/posts/001_installation/230913-224956.png)\n\nflutter 개발을 하다보면 중간에 위젯을 다른 위젯으로 감싸거나, 부모 위젯을 통째로 드러내야 하는 경우가 잦은데,\n이를 일일이 코드를 잘라내고 붙여넣기 하는건 매우 귀찮은 작업입니다.\n\n하지만 이 기능을 수행하는데 있어 Code Action은 매우 유용한 도구들을 제공합니다.\n\n기능을 수행하고자 하는 위젯의 좌측에 `💡(전구) 모양 아이콘`을 클릭하면 해당 위젯에서 수행할 수 있는 여러 기능들을 보여줍니다.\n\n또는 `Command(Window) + .` 단축키로 빠르게 Code Action에 접근할 수 있습니다.\n매우매우 자주쓰는 기능이니 본인 에디터 환경에 맞는 단축키를 외우도록 합시다.\n~_(사실 외울 필요도 없이 쓰다보면 손가락이 알아서 움직이게 된다는...)_~\n\n### Intellisense\n\n쉽게 말하면 `코드 추천 + 자동완성` 기능입니다.\n\n코드를 입력하다 보면 자동으로 코드를 추천해줄텐데, 실수로 이를 꺼버리는 일이 발생합니다.\n이 경우 코드를 지웠다가 다시 치는 것 보단, `Option(Alt) + Space`로 다시 활성화 시키는 것이 더 유용합니다.\n\n### st + (intellisense)\n\n![230913-230035](/posts/001_installation/230913-230035.png)\n\n플러터의 위젯의 대부분은 Stateful, Stateless 위젯을 상속 받습니다.\n그에 따라 여러 메서드를 override해서 사용해야만 하는데요,\n이 모든 코드를 일일이 입력하는 것도, 기억하는 것도 쉽지 않습니다.\n\n이 경우에는 `st`를 입력하고 intellisense 기능을 이용하면 VSCode가 알아서\nStateful, Stateless 위젯의 필수 부분을 알아서 완성해주고,\n클래스 이름과 관련한 부분 모두를 선택한 상태로 사용자의 입력을 기다리게 됩니다.\n\n따라서 사용자는 아래의 절차를 밟으면 간단하게 위젯 하나를 생성할 수 있게 됩니다.\n\n1. st + (intellisense)\n2. 원하는 부모위젯(Stateful, Stateless) 선택\n3. 원하는 클래스 이름 입력\n\n## 마무리\n\n지금까지 Flutter SDK 설치부터 VSCode 단축키까지 개발에 앞서 필요한 모든 준비단계를 알아봤습니다.\n추가로 필요한 설정이나 기능은 알아보시고 추가하여 사용하신다면, 개발이 조금이라도 더 즐거워지리라 생각됩니다.\n\n긴 글 읽어주셔서 감사드리고, 모두 알찬 `Flutt-er` 생활 되시길 바랍니다!\n","slug":"flutter/001_installation","readingMinutes":14,"wordCount":1016},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    br: \"br\",\n    blockquote: \"blockquote\",\n    strong: \"strong\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    del: \"del\",\n    em: \"em\",\n    h3: \"h3\",\n    ol: \"ol\",\n    img: \"img\",\n    div: \"div\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"들어가며\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#들어가며\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"들어가며...\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 포스트에선 플러터(Flutter) 개발을 시작할 때 세팅해야할 전 과정에 대해 설명합니다.\", _jsx(_components.br, {}), \"\\n\", \"Flutter SDK 설치부터 에뮬레이터 세팅, VSCode 세팅, 추가로 유용한 단축키에 대해서 알아봅니다.\", _jsx(_components.br, {}), \"\\n\", \"다만, 단축키는 운영체제, 에디터 환경, 설정에 따라 다를 수 있으니 이점 참고 바랍니다.\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsxs(_components.strong, {\n          children: [\"이미 설치를 완료하신 분들도 시간 내셔서 \", _jsx(_components.code, {\n            children: \"VSCode 세팅\"\n          }), \"부터 읽어보시는 것을 강력 추천드립니다.\"]\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"블로그 주인장은 M1 Mac 환경에서 세팅하였기에 리눅스 계열 세팅방법을 기준으로 다뤄봅니다만,\", _jsx(_components.br, {}), \"\\n\", \"윈도우 머신에서의 세팅도 다뤄볼 겁니다. (다만, 실제 테스트는 하지 않았기에 오류가 있을지도 모릅니다)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"참고로 아래의 모든 설치과정은 \", _jsx(_components.a, {\n        href: \"https://nomadcoders.co/flutter-for-beginners\",\n        children: _jsx(_components.strong, {\n          children: \"노마드코더\"\n        })\n      }), \"의 강좌를 정리한 자료입니다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://nomadcoders.co/flutter-for-beginners/lectures/4133\",\n          children: \"https://nomadcoders.co/flutter-for-beginners/lectures/4133\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://nomadcoders.co/flutter-for-beginners/lectures/4142\",\n          children: \"https://nomadcoders.co/flutter-for-beginners/lectures/4142\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"flutter-sdk-설치\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#flutter-sdk-설치\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Flutter SDK 설치\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Flutter SDK를 설치할 때 방법이 크게 두 가지로 나뉩니다.\", _jsx(_components.br, {}), \"\\n\", \"첫 번째는 Flutter 공식 사이트에서 제공하는 방식을 따라가는 방법\", _jsx(_components.br, {}), \"\\n\", \"두 번째는 패키지 매니저를 이용해서 설치하는 방법\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"제 개인적인 생각에는 패키지 매니저를 이용하는 방법이 더 간단해 보입니다.\", _jsx(_components.br, {}), \"\\n\", \"첫 번째 방법을 따라하려면 환경 PATH도 설정해야 하기에 좀 무서워 보이기 때문이죠...\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.del, {\n        children: _jsx(_components.em, {\n          children: \"(그리고 제가 이 방법밖에 안해보기도 했구요...)\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래도 일단은 두 방법 모두 소개해 드리겠습니다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"공식-사이트\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#공식-사이트\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"공식 사이트\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://flutter.dev\",\n            children: _jsx(_components.strong, {\n              children: \"플러터 공식 페이지\"\n            })\n          }), \"로 접속합니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"Get started\"\n          }), \"로 들어갑니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n            src: \"/posts/001_installation/230913-211858.png\",\n            alt: \"230913-211858\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"본인 운영체제에 맞는 Flutter SDK를 설치합니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n            src: \"/posts/001_installation/230913-212121.png\",\n            alt: \"230913-212121\"\n          })]\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"이후에는 공식 사이트에서 제공하는 문서를 천천히 따라하시면 됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"패키지-매니저-macos\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#패키지-매니저-macos\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"패키지 매니저 (MacOS)\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://brew.sh/\",\n            children: _jsx(_components.strong, {\n              children: \"Homebrew\"\n            })\n          }), \"에 들어갑니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n            src: \"/posts/001_installation/230913-214251.png\",\n            alt: \"230913-214251\"\n          })]\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.em, {\n            children: [\"참고로 Homebrew는 MacOS에서 사용할 수 있는 \", _jsx(_components.strong, {\n              children: \"대부분의 개발자도구를 터미널로 설치할 수 있는 강력한 도구\"\n            }), \"입니다.\"]\n          }), _jsx(_components.br, {}), \"\\n\", _jsxs(_components.em, {\n            children: [\"Flutter가 아니더라도 \", _jsx(_components.strong, {\n              children: \"반드시\"\n            }), \" 설치하는게 정신건강에 이롭습니다.\"]\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"터미널\"\n          }), \"을 열어줍니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"아래의 명령어를 입력하여 Homebrew를 설치합니다.\", _jsx(_components.br, {}), \"\\n\", \"(공식 사이트에서 복사하는 것을 권장합니다)\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"/bin/bash \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-c\"\n          }), \" \", _jsxs(_components.span, {\n            className: \"token string\",\n            children: [\"\\\"\", _jsxs(_components.span, {\n              className: \"token variable\",\n              children: [_jsx(_components.span, {\n                className: \"token variable\",\n                children: \"$(\"\n              }), _jsx(_components.span, {\n                className: \"token function\",\n                children: \"curl\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token parameter variable\",\n                children: \"-fsSL\"\n              }), \" https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\", _jsx(_components.span, {\n                className: \"token variable\",\n                children: \")\"\n              })]\n            }), \"\\\"\"]\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래의 명령어로 Flutter SDK를 설치합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"brew \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"install\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--cask\"\n          }), \" flutter\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"패키지-매니저-windows\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#패키지-매니저-windows\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"패키지 매니저 (Windows)\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://chocolatey.org/install#individual\",\n            children: _jsx(_components.strong, {\n              children: \"Chocolatey - individual\"\n            })\n          }), \"에 들어갑니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n            src: \"/posts/001_installation/230913-213419.png\",\n            alt: \"230913-213419\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"PowerShell\"\n          }), \"을 관리자 권한으로 실행합니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"아래의 명령어를 입력하여 Chocolatey를 설치합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"PowerShell\"\n    }), _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsx(_components.code, {\n        className: \"language-shell code-highlight\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Get-ExecutionPolicy\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"만약 \", _jsx(_components.code, {\n        children: \"Restricted\"\n      }), \" 라고 뜬다면 아래의 명령어 중 하나를 입력하면 됩니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"PowerShell\"\n    }), _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Set-ExecutionPolicy AllSigned\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"또는\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"Set-ExecutionPolicy Bypass \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-Scope\"\n          }), \" Process\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그 이후에 아래의 긴- 명령어를 입력합니다.\", _jsx(_components.br, {}), \"\\n\", \"(공식 사이트에서 복사하는 것을 권장합니다)\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"PowerShell\"\n    }), _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsx(_components.code, {\n        className: \"language-shell code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"Set-ExecutionPolicy Bypass \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-Scope\"\n          }), \" Process -Force\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"System.Net.ServicePointManager\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"::SecurityProtocol \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"System.Net.ServicePointManager\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"::SecurityProtocol \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-bor\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3072\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \" iex \", _jsxs(_components.span, {\n            className: \"token variable\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"((\"\n            }), \"New\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"-\"\n            }), \"Object System.Net.WebClient\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), \".DownloadString\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), \"'https\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"/\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"/\"\n            }), \"community.chocolatey.org\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"/\"\n            }), \"install.ps1'\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"))\"\n            })]\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Chocolatey\"\n      }), \" 설치가 완료되었다면 \", _jsx(_components.code, {\n        children: \"choco\"\n      }), \" 라는 명령어가 실행 가능할 겁니다.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"아래의 명령어로 Flutter SDK를 설치합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"PowerShell\"\n    }), _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsx(_components.code, {\n        className: \"language-shell code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"choco \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"install\"\n          }), \" flutter\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"설치-확인-방법-1\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#설치-확인-방법-1\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"설치 확인 방법 (1)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"터미널 창에 \", _jsx(_components.code, {\n        children: \"flutter\"\n      }), \" 를 입력해봅시다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n        children: \"Command not found\"\n      }), \" 와 같은 에러를 제외하고 뭐라도 뜬다면 설치가 완료된 것입니다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"애뮬레이터-설치\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#애뮬레이터-설치\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"애뮬레이터 설치\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아래의 공식 문서를 통해 설치하는 것이 가장 바람직합니다.\", _jsx(_components.br, {}), \"\\n\", \"설명도 친절해서 왠만하면 설치하는데 문제가 없을겁니다. (아예 없진 않음...)\", _jsx(_components.br, {}), \"\\n\", \"관련 링크를 아래에 정리합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"🫧\", _jsx(_components.a, {\n        href: \"https://docs.flutter.dev/get-started/install/macos#ios-setup\",\n        children: _jsx(_components.strong, {\n          children: \"MacOS - ios setup\"\n        })\n      }), _jsx(_components.br, {}), \"\\n\", \"🫧\", _jsx(_components.a, {\n        href: \"https://docs.flutter.dev/get-started/install/macos#android-setup\",\n        children: _jsx(_components.strong, {\n          children: \"MacOS - android setup\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"🫧\", _jsx(_components.a, {\n        href: \"https://docs.flutter.dev/get-started/install/windows#android-setup\",\n        children: _jsx(_components.strong, {\n          children: \"Windows - android setup\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"설치-확인-방법-2\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#설치-확인-방법-2\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"설치 확인 방법 (2)\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"터미널 창에 \", _jsx(_components.code, {\n        children: \"flutter doctor\"\n      }), \" 를 입력해봅시다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-220216.png\",\n        alt: \"230913-220216\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SDK, 애뮬레이터, 에디터까지 발생하는 문제사항을 한 눈에 파악할 수 있습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"참고로 최초 실행시 안드로이드 라이센스에 동의하라는 에러 혹은 경고가 나타날 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"그럴 땐 당황하지 마시고 아래의 명령어를 입력하면 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"(\", _jsx(_components.em, {\n        children: \"설치할 때 꼼꼼히 읽어보면 이런 내용도 있다는 걸 확인할 수 있죠...\"\n      }), \")\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"flutter doctor --android-licenses\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"troubleshooting\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#troubleshooting\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Troubleshooting\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"간혹가다 Xcode \", _jsx(_components.code, {\n        children: \"command line tools\"\n      }), \"에서 문제가 발생하는 경우가 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"명령어 라인 도구는 Xcode를 설치할 때 자동적으로 설치됩니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 제 경우에는 Xcode를 설치하기 전에 아래의 명령어로 미리 설치한 적이 있었습니다.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"Terminal\"\n    }), _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"xcode-select \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--install\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"명령어 라인 도구를 먼저 설치하고 Xcode를 설치하면 가끔 정상동작하지 않는 에러가 발생하는 거 같습니다.\", _jsx(_components.br, {}), \"\\n\", \"이런 경우에는 명령어 라인 도구를 제거하고 다시 설치하면 해결됩니다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"vscode-세팅\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#vscode-세팅\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"VSCode 세팅\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"사실 마켓플레이스에서 \", _jsx(_components.code, {\n        children: \"Flutter\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Dart\"\n      }), \" 확장을 설치하기만 하면 개발할 준비가 끝나긴 합니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만, 개발 편의성과 코드 통일을 위해서 필요한, 혹은 유용한 \", _jsx(_components.code, {\n        children: \"확장\"\n      }), \"과 \", _jsx(_components.code, {\n        children: \"setting.json\"\n      }), \"을 공유할까 합니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"settingjson\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#settingjson\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"setting.json\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아래와 같은 키값을 추가하면 개발에 있어 편의성이 증진됩니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만, 설정을 건드릴 땐, 본인의 설정과 충돌이 생기는지 반드시 확인한 후에 추가하시는 것을 권장합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"참고로, setting.json은 \", _jsx(_components.code, {\n        children: \"명령 팔레트\"\n      }), \"를 열고 \", _jsx(_components.code, {\n        children: \"settings.json\"\n      }), \"을 검색하면 바로 나옵니다.\", _jsx(_components.br, {}), \"\\n\", \"또 참고로, 명령 팔레트는 \", _jsx(_components.code, {\n        children: \"Command(Window) + Shift + P\"\n      }), \" 명령어 조합으로 열 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \"settings.json\"\n    }), _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"1\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line line-number\",\n          line: \"2\",\n          children: \"  ...\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"3\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"editor.codeActionsOnSave\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"4\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"source.fixAll\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"5\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"6\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"dart.previewFlutterUiGuides\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line line-number\",\n          line: \"7\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Line 3-5\"\n      }), \"의 설정은 자동으로 필요한 모든 곳에 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 키워드를 삽입해주는 설정입니다.\", _jsx(_components.br, {}), \"\\n\", \"flutter에서 const를 사용하는 것은 매우 중요한데 그 이유에 대해서는 다음에 설명하도록 하겠습니다.\", _jsx(_components.br, {}), \"\\n\", \"일단은 가능하다면 반드시 const를 붙이는게 좋고, 이를 자동으로 붙여줄 수 있다는 것만 기억합니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Line 6\"\n      }), \"의 설정은 flutter 위젯을 트리 구조로 선으로 연결해주는 설정입니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-222546.png\",\n        alt: \"230913-222546\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"flutter은 위젯의 depth가 깊어지는 단점이 있는데 이를 어느정도 극복하게 해주는 유용한 설정입니다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"error-lens\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#error-lens\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Error Lens\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-223129.png\",\n        alt: \"230913-223129\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Error Lens는 코드 문제의 원인을 에디터상에 바로 띄워주는 확장입니다.\", _jsx(_components.br, {}), \"\\n\", \"실시간으로 무슨 에러가 있는지 한 눈에 확인할 수 있는게 개인적으로 매우 만족하면서 사용하고 있습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-223528.png\",\n        alt: \"230913-223528\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"개인적으로 눈뽕(?) 방지를 위해 \", _jsx(_components.code, {\n        children: \"line\"\n      }), \" 이 아닌, \", _jsx(_components.code, {\n        children: \"message\"\n      }), \" 로 설정하는 것을 추천드립니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-224036.png\",\n        alt: \"230913-224036\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"또한, 분석 레벨에서 \", _jsx(_components.code, {\n        children: \"info\"\n      }), \" 는 제거해주시는 것을 추천 드립니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"flutter의 경우 info가 중첩되서 뜨는 경우가 많기에 위 두 세팅을 바꾸지 않으면 아래와 같은 눈뽕(?)을 자주 겪게 될 지도 모릅니다...\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-223954.png\",\n        alt: \"230913-223954\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"image-preview\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#image-preview\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Image preview\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-224456.png\",\n        alt: \"230913-224456\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Image preview는 로컬, 네트워크 이미지를 미리보기 형식으로 띄워주는 확장입니다.\", _jsx(_components.br, {}), \"\\n\", \"FE 개발 입장에서 이미지나 svg, icon을 사용할 일이 많은데, 이를 미리볼 수 있다는 것 만으로도 많은 시간을 절약할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"vscode-단축키\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#vscode-단축키\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"VSCode 단축키\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"개발 시간을 줄여주는 유용한 단축키 및 snippets 를 소개합니다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"code-action\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#code-action\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Code Action\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-224956.png\",\n        alt: \"230913-224956\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"flutter 개발을 하다보면 중간에 위젯을 다른 위젯으로 감싸거나, 부모 위젯을 통째로 드러내야 하는 경우가 잦은데,\", _jsx(_components.br, {}), \"\\n\", \"이를 일일이 코드를 잘라내고 붙여넣기 하는건 매우 귀찮은 작업입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 이 기능을 수행하는데 있어 Code Action은 매우 유용한 도구들을 제공합니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기능을 수행하고자 하는 위젯의 좌측에 \", _jsx(_components.code, {\n        children: \"💡(전구) 모양 아이콘\"\n      }), \"을 클릭하면 해당 위젯에서 수행할 수 있는 여러 기능들을 보여줍니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"또는 \", _jsx(_components.code, {\n        children: \"Command(Window) + .\"\n      }), \" 단축키로 빠르게 Code Action에 접근할 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"매우매우 자주쓰는 기능이니 본인 에디터 환경에 맞는 단축키를 외우도록 합시다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.del, {\n        children: _jsx(_components.em, {\n          children: \"(사실 외울 필요도 없이 쓰다보면 손가락이 알아서 움직이게 된다는...)\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"intellisense\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#intellisense\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Intellisense\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"쉽게 말하면 \", _jsx(_components.code, {\n        children: \"코드 추천 + 자동완성\"\n      }), \" 기능입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"코드를 입력하다 보면 자동으로 코드를 추천해줄텐데, 실수로 이를 꺼버리는 일이 발생합니다.\", _jsx(_components.br, {}), \"\\n\", \"이 경우 코드를 지웠다가 다시 치는 것 보단, \", _jsx(_components.code, {\n        children: \"Option(Alt) + Space\"\n      }), \"로 다시 활성화 시키는 것이 더 유용합니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"st--intellisense\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#st--intellisense\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"st + (intellisense)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/001_installation/230913-230035.png\",\n        alt: \"230913-230035\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"플러터의 위젯의 대부분은 Stateful, Stateless 위젯을 상속 받습니다.\", _jsx(_components.br, {}), \"\\n\", \"그에 따라 여러 메서드를 override해서 사용해야만 하는데요,\", _jsx(_components.br, {}), \"\\n\", \"이 모든 코드를 일일이 입력하는 것도, 기억하는 것도 쉽지 않습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이 경우에는 \", _jsx(_components.code, {\n        children: \"st\"\n      }), \"를 입력하고 intellisense 기능을 이용하면 VSCode가 알아서\", _jsx(_components.br, {}), \"\\n\", \"Stateful, Stateless 위젯의 필수 부분을 알아서 완성해주고,\", _jsx(_components.br, {}), \"\\n\", \"클래스 이름과 관련한 부분 모두를 선택한 상태로 사용자의 입력을 기다리게 됩니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서 사용자는 아래의 절차를 밟으면 간단하게 위젯 하나를 생성할 수 있게 됩니다.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"st + (intellisense)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"원하는 부모위젯(Stateful, Stateless) 선택\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"원하는 클래스 이름 입력\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"마무리\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#마무리\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"마무리\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"지금까지 Flutter SDK 설치부터 VSCode 단축키까지 개발에 앞서 필요한 모든 준비단계를 알아봤습니다.\", _jsx(_components.br, {}), \"\\n\", \"추가로 필요한 설정이나 기능은 알아보시고 추가하여 사용하신다면, 개발이 조금이라도 더 즐거워지리라 생각됩니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"긴 글 읽어주셔서 감사드리고, 모두 알찬 \", _jsx(_components.code, {\n        children: \"Flutt-er\"\n      }), \" 생활 되시길 바랍니다!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"toc":[{"slug":"들어가며","text":"들어가며...","subSections":[]},{"slug":"flutter-sdk-설치","text":"Flutter SDK 설치","subSections":[{"slug":"공식-사이트","text":"공식 사이트"},{"slug":"패키지-매니저-macos","text":"패키지 매니저 (MacOS)"},{"slug":"패키지-매니저-windows","text":"패키지 매니저 (Windows)"},{"slug":"설치-확인-방법-1","text":"설치 확인 방법 (1)"}]},{"slug":"애뮬레이터-설치","text":"애뮬레이터 설치","subSections":[{"slug":"설치-확인-방법-2","text":"설치 확인 방법 (2)"},{"slug":"troubleshooting","text":"Troubleshooting"}]},{"slug":"vscode-세팅","text":"VSCode 세팅","subSections":[{"slug":"settingjson","text":"setting.json"},{"slug":"error-lens","text":"Error Lens"},{"slug":"image-preview","text":"Image preview"}]},{"slug":"vscode-단축키","text":"VSCode 단축키","subSections":[{"slug":"code-action","text":"Code Action"},{"slug":"intellisense","text":"Intellisense"},{"slug":"st--intellisense","text":"st + (intellisense)"}]},{"slug":"마무리","text":"마무리","subSections":[]}]},"__N_SSG":true}