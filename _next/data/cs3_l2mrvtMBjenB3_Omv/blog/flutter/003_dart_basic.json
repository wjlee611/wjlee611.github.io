{"pageProps":{"post":{"title":"Dart 언어 기초","description":"Dart 언어에 대한 기초지식을 정리해봤습니다.","icon":"","image":"","tags":["Dart"],"draft":false,"date":"2023-09-14 / 17:09","content":"\n<warning>\n  제가 생각하기에 **너무 기초지식**이다 하는 부분은 과감하게 **제외**했습니다.\n  다만, 기초지식이다 하더라도 `개념적으로 매우 중요`하거나 `많이들 알려주지 않는 내용`은 포함하였습니다.\n</warning>\n\n## variables\n\n변수 네이밍 방법은 다음과 같습니다.\n\n```dart:.dart\n  <제어자> <타입> <변수이름> = <값>;\n```\n\n타입은 int, String 과 같은 타입들이 오거나, `var` 와 같은 타입 추론 키워드도 사용할 수 있습니다.\n제어자에는 `final`, `const`, `late`, `static` 와 같은 키워드가 오게 됩니다.\n\n### var\n\ndart에선 var는 타입 추론 키워드로 사용되는 예약어입니다.\n따라서 `<값>`에 어떤 데이터가 오는지에 따라 변수의 타입이 결정됩니다.\n단, 값을 지정하지 않을 때는 `dynamic` 타입으로 자동 결정됩니다.\n\n<tip>\n  `dynamic?`\n  타입 안정성이 보장되지 않지만, 모든 타입의 데이터를 할당할 수 있도록 해줍니다.\n  보통 json 파일을 파싱할 때 임시로 데이터 형식을 지정할 때 많이 사용합니다.\n</tip>\n\n### final vs const\n\n`final`과 `const` 둘 모두 데이터의 불변성을 보장하고 싶을 때 사용하는 키워드 라는 점에서는 공통점을 갖습니다.\n또한, 이 키워드를 사용한다면 타입을 굳이 지정하지 않아도 알아서 `var`로 타입을 지정하는 효과가 있습니다.\n하지만 둘 사이의 중요한 차이점이 있습니다.\n\n`final`은 런타임에 값이 지정됩니다.\n따라서 메모리상의 `heap 영역`에 데이터가 저장됩니다.\n그렇기에 생명주기는 스코프 내부로 한정되기 떄문에 flutter 에서 **build 메서드**가 호출될 때 이 부분은 `반복적`으로 메모리에 올라왔다 내려갔다를 반복하게 됩니다.\n\n`const`는 컴파일타임에 값이 지정됩니다.\n특이한 점인 const 키워드로 지정된 데이터는 메모리상에 별도로 적재되지 않고, `컴파일된 코드의 상수 풀(constant pool)`상에 저장됩니다.\n따라서 별도의 인스턴스가 생성되지 않고, 생명주기도 프로그램 수명과 동잃하기에 flutter 에서 **build 메서드**가 호출될 때 이 부분은 `다시 랜더링되지 않습니다`.\n\n### late\n\ndart는 **null-safety** 언어입니다.\n따라서 `<타입>?` 와 같이 `?`로 null값이 가능하다고 지정해 주지 않는한 변수 선언시(혹은 인스턴스 생성시) 반드시 값을 지정해야 합니다.\n하지만, `late`의 경우에는 인스턴스 생성 시점에 null값을 허용하지만, 이후에 `단 한번` 값을 할당할 수 있도록 해주는 키워드입니다.\n\n물론, null값이 임시 허용이 되는만큼 사용에 주의가 필요합니다.\n\n### static\n\n`static`은 클래스가 로드될 때 값이 지정됩니다.\n따라서 heap영역이 아닌 `클래스 자체 메모리 영역`에 저장됩니다.\n그렇기에 일반 메서드에선 static 변수에 접근할 수 있지만, static 메서드에선 일반 변수에 접근할 수 없습니다.\n하지만 그렇기에 클래스를 인스턴스화 하지 않아도 바로 접근이 가능합니다.\n\n---\n\n## function\n\ndart는 사실 js를 대체하기 위해 나온 언어라고 합니다.\n그래서일까요, dart의 모든 데이터 타입도 사실은 모두 `Object`입니다.\n\n뿐만 아니라, `변수에 함수를 할당`하거나, `익명 함수`, `람다 함수` 모두 사용 가능합니다.\n\n### named parameter\n\n보통 함수의 파라미터는 아래와 같이 작성하곤 합니다.\n\n```dart:.dart\n  void myFunction(int num) {\n    ...\n  }\n  ...\n  myFunction(1);\n```\n\n하지만 입력받고자 하는 파라미터가 많아진다면, 인자를 넘겨줄 때 어느 자리에 어느 데이터를 넘겨야 할지 알기가 어렵습니다.\n특히 flutter에서는 위젯을 만들 때 인자를 십수개씩 넘기는 경우가 많죠...\n\n그렇기에 `named parameter` 기능을 제공합니다. (마치 js에서 객체를 인자로 넘기 듯)\n\n```dart:.dart\n  void myFunction({required int myNum}) {\n    ...\n  }\n  ...\n  myFunction(myNum: 1);\n```\n\n이렇게 하면 함수 호출이나, 클래스 생성자 호출시 어느 인자에 어느 데이터를 넘겨야 하는지 명확해집니다.\n\n물론, 위 두 방식을 `혼합`하여 사용할 수도 있습니다.\n\n```dart:.dart\n  void myFunction(String str, {required int val}) {\n    ...\n  }\n  ...\n  myFunction(\"string\", myNum: 1);\n```\n\n---\n\n## class\n\n### constructor\n\n```dart:.dart\nclass Car {\n  final String color;\n  int wheels;\n  String? name;\n\n  Car({\n    required this.color,\n    required this.wheels,\n    this.name,\n  });\n}\n```\n\n기본적으로 생성자는 위와 같이 정의할 수 있습니다.\n`named parameter` 형식으로도 사용이 가능합니다. (대부분의 flutter 위젯은 위와 같이 정의합니다)\n\n### named constructor\n\n```dart:.dart\nCar {\n  final String color;\n  late int wheels;\n  String? name;\n\n  Car.fourWheels({required this.color, this.name}) {\n    this.wheels = 4;\n  }\n}\n```\n\n클래스를 생성할 때 특별한 기능을 붙인채로 인스턴스화 할 수 있도록 `named constructor`를 지원합니다.\n보통 초기상태를 위한 `.init`, 모델링을 위한 `.fromJson`와 같이 쓰이곤 합니다.\n(참고로 이 때 factory 키워드를 이용해서 싱글톤 패턴으로 많이 구현하는데 이는 다음에 소개하겠습니다)\n\n### initializer list\n\n위에 `wheels`을 별도로 초기화하기 위해 late 한정자를 사용했는데요, 보기가 안좋습니다.\n`final` 멤버변수는 생성자 body에서 값을 지정할 수 없기에 저런식으로 표현했는데요,\n`initializer list`를 이용하면 final 멤버변수도 생성자 호출시 별도로 처리할 수 있습니다.\n\n```dart:.dart\nclass Car {\n  final String color;\n  final int wheels;\n  String? name;\n\n  Car.prototype({required this.color}) : wheels = 4 {\n    this.name = 'proto';\n  }\n}\n```\n\n`:`를 붙여 `: wheels = 4`와 같이 사용할 수 있습니다.\n또한, 뒤에 body를 붙여 추가작업 또한 할 수 있습니다.\n\ninitializer **list**에서 알 수 있듯 `wheels = 4` 와 같은 initializer를 `,`를 이용해서 여려개 연달아 초기화할 수 있습니다.\n\n### redirecting constructor\n\n```dart:.dart\nclass Car {\n  final String color;\n  final int wheels;\n  String? name;\n\n  Car({\n    required this.color,\n    required this.wheels,\n    this.name,\n  });\n\n  Car.fourWheels({required String color, String? name})\n      : this(\n          color: color,\n          wheels: 4,\n          name: name,\n        );\n}\n```\n\n기존의 생성자를 `this`로 호출하여 named constructor를 구현한 방식입니다.\n다만, 이 경우에는 생성자의 body를 구현할 수 없습니다.\n","slug":"flutter/003_dart_basic","readingMinutes":9,"wordCount":703},"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    br: \"br\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    div: \"div\",\n    pre: \"pre\",\n    h3: \"h3\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"warning\", {\n      children: _jsxs(_components.p, {\n        children: [\"제가 생각하기에 \", _jsx(_components.strong, {\n          children: \"너무 기초지식\"\n        }), \"이다 하는 부분은 과감하게 \", _jsx(_components.strong, {\n          children: \"제외\"\n        }), \"했습니다.\", _jsx(_components.br, {}), \"\\n\", \"다만, 기초지식이다 하더라도 \", _jsx(_components.code, {\n          children: \"개념적으로 매우 중요\"\n        }), \"하거나 \", _jsx(_components.code, {\n          children: \"많이들 알려주지 않는 내용\"\n        }), \"은 포함하였습니다.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"variables\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#variables\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"variables\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"변수 네이밍 방법은 다음과 같습니다.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsx(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"제어자\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"타입\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"변수이름\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"값\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"타입은 int, String 과 같은 타입들이 오거나, \", _jsx(_components.code, {\n        children: \"var\"\n      }), \" 와 같은 타입 추론 키워드도 사용할 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"제어자에는 \", _jsx(_components.code, {\n        children: \"final\"\n      }), \", \", _jsx(_components.code, {\n        children: \"const\"\n      }), \", \", _jsx(_components.code, {\n        children: \"late\"\n      }), \", \", _jsx(_components.code, {\n        children: \"static\"\n      }), \" 와 같은 키워드가 오게 됩니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"var\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#var\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"var\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"dart에선 var는 타입 추론 키워드로 사용되는 예약어입니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 \", _jsx(_components.code, {\n        children: \"<값>\"\n      }), \"에 어떤 데이터가 오는지에 따라 변수의 타입이 결정됩니다.\", _jsx(_components.br, {}), \"\\n\", \"단, 값을 지정하지 않을 때는 \", _jsx(_components.code, {\n        children: \"dynamic\"\n      }), \" 타입으로 자동 결정됩니다.\"]\n    }), \"\\n\", _jsx(\"tip\", {\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"dynamic?\"\n        }), _jsx(_components.br, {}), \"\\n\", \"타입 안정성이 보장되지 않지만, 모든 타입의 데이터를 할당할 수 있도록 해줍니다.\", _jsx(_components.br, {}), \"\\n\", \"보통 json 파일을 파싱할 때 임시로 데이터 형식을 지정할 때 많이 사용합니다.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"final-vs-const\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#final-vs-const\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"final vs const\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"final\"\n      }), \"과 \", _jsx(_components.code, {\n        children: \"const\"\n      }), \" 둘 모두 데이터의 불변성을 보장하고 싶을 때 사용하는 키워드 라는 점에서는 공통점을 갖습니다.\", _jsx(_components.br, {}), \"\\n\", \"또한, 이 키워드를 사용한다면 타입을 굳이 지정하지 않아도 알아서 \", _jsx(_components.code, {\n        children: \"var\"\n      }), \"로 타입을 지정하는 효과가 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 둘 사이의 중요한 차이점이 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"final\"\n      }), \"은 런타임에 값이 지정됩니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 메모리상의 \", _jsx(_components.code, {\n        children: \"heap 영역\"\n      }), \"에 데이터가 저장됩니다.\", _jsx(_components.br, {}), \"\\n\", \"그렇기에 생명주기는 스코프 내부로 한정되기 떄문에 flutter 에서 \", _jsx(_components.strong, {\n        children: \"build 메서드\"\n      }), \"가 호출될 때 이 부분은 \", _jsx(_components.code, {\n        children: \"반복적\"\n      }), \"으로 메모리에 올라왔다 내려갔다를 반복하게 됩니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"const\"\n      }), \"는 컴파일타임에 값이 지정됩니다.\", _jsx(_components.br, {}), \"\\n\", \"특이한 점인 const 키워드로 지정된 데이터는 메모리상에 별도로 적재되지 않고, \", _jsx(_components.code, {\n        children: \"컴파일된 코드의 상수 풀(constant pool)\"\n      }), \"상에 저장됩니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 별도의 인스턴스가 생성되지 않고, 생명주기도 프로그램 수명과 동잃하기에 flutter 에서 \", _jsx(_components.strong, {\n        children: \"build 메서드\"\n      }), \"가 호출될 때 이 부분은 \", _jsx(_components.code, {\n        children: \"다시 랜더링되지 않습니다\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"late\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#late\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"late\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"dart는 \", _jsx(_components.strong, {\n        children: \"null-safety\"\n      }), \" 언어입니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 \", _jsx(_components.code, {\n        children: \"<타입>?\"\n      }), \" 와 같이 \", _jsx(_components.code, {\n        children: \"?\"\n      }), \"로 null값이 가능하다고 지정해 주지 않는한 변수 선언시(혹은 인스턴스 생성시) 반드시 값을 지정해야 합니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만, \", _jsx(_components.code, {\n        children: \"late\"\n      }), \"의 경우에는 인스턴스 생성 시점에 null값을 허용하지만, 이후에 \", _jsx(_components.code, {\n        children: \"단 한번\"\n      }), \" 값을 할당할 수 있도록 해주는 키워드입니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"물론, null값이 임시 허용이 되는만큼 사용에 주의가 필요합니다.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"static\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#static\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"static\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"static\"\n      }), \"은 클래스가 로드될 때 값이 지정됩니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 heap영역이 아닌 \", _jsx(_components.code, {\n        children: \"클래스 자체 메모리 영역\"\n      }), \"에 저장됩니다.\", _jsx(_components.br, {}), \"\\n\", \"그렇기에 일반 메서드에선 static 변수에 접근할 수 있지만, static 메서드에선 일반 변수에 접근할 수 없습니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 그렇기에 클래스를 인스턴스화 하지 않아도 바로 접근이 가능합니다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"function\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#function\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"function\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"dart는 사실 js를 대체하기 위해 나온 언어라고 합니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서일까요, dart의 모든 데이터 타입도 사실은 모두 \", _jsx(_components.code, {\n        children: \"Object\"\n      }), \"입니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"뿐만 아니라, \", _jsx(_components.code, {\n        children: \"변수에 함수를 할당\"\n      }), \"하거나, \", _jsx(_components.code, {\n        children: \"익명 함수\"\n      }), \", \", _jsx(_components.code, {\n        children: \"람다 함수\"\n      }), \" 모두 사용 가능합니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"named-parameter\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#named-parameter\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"named parameter\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보통 함수의 파라미터는 아래와 같이 작성하곤 합니다.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"int num\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"하지만 입력받고자 하는 파라미터가 많아진다면, 인자를 넘겨줄 때 어느 자리에 어느 데이터를 넘겨야 할지 알기가 어렵습니다.\", _jsx(_components.br, {}), \"\\n\", \"특히 flutter에서는 위젯을 만들 때 인자를 십수개씩 넘기는 경우가 많죠...\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"그렇기에 \", _jsx(_components.code, {\n        children: \"named parameter\"\n      }), \" 기능을 제공합니다. (마치 js에서 객체를 인자로 넘기 듯)\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"required int myNum\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"myNum\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게 하면 함수 호출이나, 클래스 생성자 호출시 어느 인자에 어느 데이터를 넘겨야 하는지 명확해집니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"물론, 위 두 방식을 \", _jsx(_components.code, {\n        children: \"혼합\"\n      }), \"하여 사용할 수도 있습니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" str\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"required int val\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"myFunction\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"\\\"string\\\"\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" myNum\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"class\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#class\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"class\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"constructor\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#constructor\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"constructor\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  int wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"?\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기본적으로 생성자는 위와 같이 정의할 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n        children: \"named parameter\"\n      }), \" 형식으로도 사용이 가능합니다. (대부분의 flutter 위젯은 위와 같이 정의합니다)\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"named-constructor\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#named-constructor\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"named constructor\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  late int wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"?\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"fourWheels\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"wheels \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"4\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"클래스를 생성할 때 특별한 기능을 붙인채로 인스턴스화 할 수 있도록 \", _jsx(_components.code, {\n        children: \"named constructor\"\n      }), \"를 지원합니다.\", _jsx(_components.br, {}), \"\\n\", \"보통 초기상태를 위한 \", _jsx(_components.code, {\n        children: \".init\"\n      }), \", 모델링을 위한 \", _jsx(_components.code, {\n        children: \".fromJson\"\n      }), \"와 같이 쓰이곤 합니다.\", _jsx(_components.br, {}), \"\\n\", \"(참고로 이 때 factory 키워드를 이용해서 싱글톤 패턴으로 많이 구현하는데 이는 다음에 소개하겠습니다)\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"initializer-list\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#initializer-list\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"initializer list\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위에 \", _jsx(_components.code, {\n        children: \"wheels\"\n      }), \"을 별도로 초기화하기 위해 late 한정자를 사용했는데요, 보기가 안좋습니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n        children: \"final\"\n      }), \" 멤버변수는 생성자 body에서 값을 지정할 수 없기에 저런식으로 표현했는데요,\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n        children: \"initializer list\"\n      }), \"를 이용하면 final 멤버변수도 생성자 호출시 별도로 처리할 수 있습니다.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" int wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"?\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"prototype\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" wheels \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"4\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string-literal\",\n            children: _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'proto'\"\n            })\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \":\"\n      }), \"를 붙여 \", _jsx(_components.code, {\n        children: \": wheels = 4\"\n      }), \"와 같이 사용할 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"또한, 뒤에 body를 붙여 추가작업 또한 할 수 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"initializer \", _jsx(_components.strong, {\n        children: \"list\"\n      }), \"에서 알 수 있듯 \", _jsx(_components.code, {\n        children: \"wheels = 4\"\n      }), \" 와 같은 initializer를 \", _jsx(_components.code, {\n        children: \",\"\n      }), \"를 이용해서 여려개 연달아 초기화할 수 있습니다.\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"redirecting-constructor\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#redirecting-constructor\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"redirecting constructor\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"rehype-code-title\",\n      children: \".dart\"\n    }), _jsx(_components.pre, {\n      className: \"language-dart\",\n      children: _jsxs(_components.code, {\n        className: \"language-dart code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"final\"\n          }), \" int wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"?\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    required \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), \"name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"Car\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"fourWheels\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"required \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token class-name\",\n            children: \"String\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"?\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"      \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"this\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"          color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" color\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"          wheels\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"4\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"          name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" name\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"        \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기존의 생성자를 \", _jsx(_components.code, {\n        children: \"this\"\n      }), \"로 호출하여 named constructor를 구현한 방식입니다.\", _jsx(_components.br, {}), \"\\n\", \"다만, 이 경우에는 생성자의 body를 구현할 수 없습니다.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"toc":[{"slug":"variables","text":"variables","subSections":[{"slug":"var","text":"var"},{"slug":"final-vs-const","text":"final vs const"},{"slug":"late","text":"late"},{"slug":"static","text":"static"}]},{"slug":"function","text":"function","subSections":[{"slug":"named-parameter","text":"named parameter"}]},{"slug":"class","text":"class","subSections":[{"slug":"constructor","text":"constructor"},{"slug":"named-constructor","text":"named constructor"},{"slug":"initializer-list","text":"initializer list"},{"slug":"redirecting-constructor","text":"redirecting constructor"}]}]},"__N_SSG":true}